/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2017 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package interlanguagetest

typeCollection {
	// TYPE DEFINITIONS (ALIASES)
	// not supported

	// ARRAYS
	// only implicit, one-dimensional array types are supported

	// ENUMERATIONS

	<**
		@description: overloaded enumeration in anonymous typeCollection
		@details: enumerations with the same name but different values reside
			in other typeCollections and interfaces
	**>
	enumeration Enumeration {
		ENUM_0_VALUE_1 = 1
		ENUM_0_VALUE_2 = 2
		ENUM_0_VALUE_3 = 3
	}

	enumeration EnumerationWithoutDefinedValues {
		ENUM_0_VALUE_1
		ENUM_0_VALUE_2
		ENUM_0_VALUE_3
	}

	// STRUCTURES

	<**
		@description: overloaded struct in anonymous typeCollection
		@details: struct with the same name but different members resides
			in other named typeCollection
	**>
	struct BaseStruct {
		String baseStructStringInAnonymousTypeCollection
	}

	// UNIONS (VARIANTS)
	// not supported in JavaScript, same as structures in Java, C++

	// MAPS (DICTIONARIES)
	// not supported
}

typeCollection namedTypeCollection1 {
	// TYPE DEFINITIONS (ALIASES)
	// not supported

	// ARRAYS
	// only implicit, one-dimensional array types are supported

	// ENUMERATIONS

	<**
		@description: overloaded enumeration in typeCollection 1
		@details: enumerations with the same name but different values reside
			in other typeCollections and interfaces
	**>
	enumeration Enumeration {
		ENUM_1_VALUE_1 = 1001
		ENUM_1_VALUE_2 = 1002
		ENUM_1_VALUE_3 = 1003
	}

	// STRUCTURES

	<**
		@description: overloaded struct in typeCollection 1
		@details: struct with the same name but different members resides
			in other anonymous and named typeCollection
	**>
	struct BaseStruct {
		String baseStructStringInTypeCollection1
	}

	struct StructWithStringArray {
		String[] stringArrayElement
	}

	// UNIONS (VARIANTS)
	// not supported in JavaScript, same as structures in Java, C++

	// MAPS (DICTIONARIES)
	// not supported
}

typeCollection namedTypeCollection2 {
	version { major 2 minor 0 }

	// PRIMITIVE CONSTANTS

	const String constString = "constString"
	const UInt8 constUInt8 = 128

	// COMPLEX CONSTANTS

	const interlanguagetest.Enumeration constEnumeration = Enumeration.ENUM_0_VALUE_3

	const EnumerationWithoutDefinedValues constEnumerationWithoutDefinedValues = EnumerationWithoutDefinedValues.ENUM_0_VALUE_2

	// ARRAYS
	// only implicit, one-dimensional array types are supported

	// ENUMERATIONS

	<**
		@description: overloaded enumeration in typeCollection 2
		@details: enumerations with the same name but different values reside
			in other typeCollections and interfaces
	**>
	enumeration Enumeration {
		ENUM_2_VALUE_1 = 2001
		ENUM_2_VALUE_2 = 2002
		ENUM_2_VALUE_3 = 2003
	}

	enumeration ExtendedEnumerationWithPartlyDefinedValues extends interlanguagetest.EnumerationWithoutDefinedValues {
		ENUM_2_VALUE_EXTENSION_FOR_ENUM_WITHOUT_DEFINED_VALUES = 2000001
	}

	enumeration ExtendedTypeCollectionEnumerationInTypeCollection extends namedTypeCollection1.Enumeration {
		ENUM_2_VALUE_EXTENSION_FOR_TYPECOLLECTION = 2000001
	}

	enumeration ExtendedInterfaceEnumerationInTypeCollection extends TestInterface.InterfaceEnumeration {
		ENUM_2_VALUE_EXTENSION_FOR_INTERFACE = 2000001
	}

	enumeration ExtendedExtendedEnumeration extends ExtendedTypeCollectionEnumerationInTypeCollection {
		ENUM_2_VALUE_EXTENSION_EXTENDED = 2000002
	}

	enumeration ErrorEnumTc {
		ERROR_1_0_TC_2 = 0
		ERROR_1_1_TC_2
		ERROR_1_2_TC_2
		ERROR_1_3_TC_2
	}

	enumeration ExtendedErrorEnumTc extends ErrorEnumTc {
		ERROR_2_1_TC2 = 21
		ERROR_2_2_TC2 = 22
		ERROR_2_3_TC2 = 23
	}

	// STRUCTURES

	struct BaseStructWithoutElements polymorphic {
	}

	<**
		@description: overloaded struct in typeCollection 2
		@details: struct with the same name but different members resides
			in other anonymous and named typeCollection
	**>
	struct BaseStruct {
		String baseStructString
	}

	struct StructOfPrimitives extends BaseStructWithoutElements {
		Boolean booleanElement
		//ByteBuffer not supported
		Double doubleElement
		Float floatElement
		Int8 int8MinElement
		Int8 int8MaxElement
		Int16 int16MinElement
		Int16 int16MaxElement
		Int32 int32MinElement
		Int32 int32MaxElement
		Int64 int64MinElement
		Int64 int64MaxElement
		//Integer not supported
		String constString
		UInt8 uInt8MinElement
		UInt8 uInt8MaxElement
		UInt16 uInt16MinElement
		UInt16 uInt16MaxElement
		UInt32 uInt32MinElement
		UInt32 uInt32MaxElement
		UInt64 uInt64MinElement
		UInt64 uInt64MaxElement
		//undefined not supported

		Boolean[] booleanArray
		//ByteBuffer[] not supported
		Double[] doubleArray
		Float[] floatArray
		Int16[] int16Array
		Int32[] int32Array
		Int64[] int64Array
		Int8[] int8Array
		//Integer[] not supported
		String[] stringArray
		UInt16[] uInt16Array
		UInt32[] uInt32Array
		UInt64[] uInt64Array
		UInt8[] uInt8Array
		//undefined[] not supported
	}

	struct ExtendedBaseStruct extends BaseStruct {
		interlanguagetest.Enumeration enumElement
	}

	struct ExtendedExtendedBaseStruct extends ExtendedBaseStruct {
		EnumerationWithoutDefinedValues enumWithoutDefinedValuesElement
	}

	struct ExtendedStructOfPrimitives extends StructOfPrimitives {
		ExtendedTypeCollectionEnumerationInTypeCollection extendedEnumElement
		ExtendedBaseStruct extendedStructElement
	}

	// POLYMORPHIC STRUCTURES
	// same as non polymorphic structures

	// UNIONS (VARIANTS)
	// not supported in JavaScript, same as structures in Java, C++

	// MAPS (DICTIONARIES)
	map MapStringString {
		String to String
	}
}

typeCollection typeDefCollection {
	version { major 1 minor 0 }

	// TYPE DEFINITIONS (ALIASES)
	typedef TypeDefForInt64      is Int64
	typedef TypeDefForString     is String
	typedef TypeDefForStruct     is namedTypeCollection2.BaseStruct
	typedef TypeDefForMap        is namedTypeCollection2.MapStringString
	typedef TypeDefForEnum       is Enumeration
	typedef TypeDefForByteBuffer is ByteBuffer

	struct ArrayTypeDefStruct {
		TypeDefForString[] typeDefStringArray
	}
}


// interface inheritance is not supported (ignored by the generator)
<**
	@description: desc
		#noVersionGeneration
	@details: details
	@see: see
**>
interface TestInterface {

	version { major 0 minor 1 }

	// PRIMITIVE TYPE ATTRIBUTES
	attribute UInt8 attributeUInt8

	attribute Double attributeDouble

	attribute Boolean attributeBooleanReadonly readonly

	attribute String attributeStringNoSubscriptions noSubscriptions

	attribute Int8 attributeInt8readonlyNoSubscriptions readonly noSubscriptions

	attribute ByteBuffer attributeByteBuffer

	// currently not supported
	// attribute Integer attributeIntegerWithoutRange

	// USER-DEFINED TYPE ATTRIBUTES

	attribute String[] attributeArrayOfStringImplicit

	attribute Enumeration attributeEnumeration

	attribute namedTypeCollection2.ExtendedEnumerationWithPartlyDefinedValues attributeExtendedEnumerationReadonly readonly

	attribute namedTypeCollection2.BaseStruct attributeBaseStruct

	attribute namedTypeCollection2.ExtendedExtendedBaseStruct attributeExtendedExtendedBaseStruct

	attribute namedTypeCollection2.MapStringString attributeMapStringString

	// ATTRIBUTE where getter / setter throws exception

	attribute Boolean attributeWithExceptionFromGetter readonly

	attribute Boolean attributeWithExceptionFromSetter

	attribute typeDefCollection.TypeDefForInt64 attributeInt64TypeDef

	attribute typeDefCollection.TypeDefForString attributeStringTypeDef

	attribute typeDefCollection.TypeDefForStruct attributeStructTypeDef

	attribute typeDefCollection.TypeDefForMap attributeMapTypeDef

	attribute typeDefCollection.TypeDefForEnum attributeEnumTypeDef

	attribute typeDefCollection.TypeDefForByteBuffer attributeByteBufferTypeDef

	attribute typeDefCollection.ArrayTypeDefStruct attributeArrayTypeDef

	// METHODS WITHOUT ERROR DEFINITIONS

	method methodWithoutParameters {
	}

	method methodWithoutInputParameter {
		out {
			Boolean booleanOut
		}
	}

	method methodWithoutOutputParameter {
		in {
			Boolean booleanArg
		}
	}

	method methodWithSinglePrimitiveParameters {
		in {
			UInt16 uInt16Arg
		}
		out {
			String stringOut
		}
	}

	method methodWithMultiplePrimitiveParameters {
		in {
			Int32 int32Arg
			Float floatArg
			Boolean booleanArg
		}
		out {
			Double doubleOut
			String stringOut
		}
	}

	method methodWithSingleArrayParameters {
		in {
			Double[] doubleArrayArg
		}
		out {
			String[] stringArrayOut
		}
	}

	method methodWithMultipleArrayParameters {
		in {
			String[] stringArrayArg
			Int8[] int8ArrayArg
			namedTypeCollection2.ExtendedInterfaceEnumerationInTypeCollection[] enumArrayArg
			namedTypeCollection1.StructWithStringArray[] structWithStringArrayArrayArg
		}
		out {
			UInt64[] uInt64ArrayOut
			namedTypeCollection1.StructWithStringArray[] structWithStringArrayArrayOut
		}
	}

	method methodWithSingleByteBufferParameter {
		in {
			ByteBuffer byteBufferIn
		}
		out {
			ByteBuffer byteBufferOut
		}
	}

	method methodWithMultipleByteBufferParameters {
		in {
			ByteBuffer byteBufferIn1
			ByteBuffer byteBufferIn2
		}
		out {
			ByteBuffer byteBufferOut
		}
	}

	// METHODS WITH TYPEDEF PARAMETERS
	method methodWithInt64TypeDefParameter {
		in {
			typeDefCollection.TypeDefForInt64 int64TypeDefIn
		}
		out {
			typeDefCollection.TypeDefForInt64 int64TypeDefOut
		}
	}

	method methodWithStringTypeDefParameter {
		in {
			typeDefCollection.TypeDefForString stringTypeDefIn
		}
		out {
			typeDefCollection.TypeDefForString stringTypeDefOut
		}
	}

	method methodWithStructTypeDefParameter {
		in {
			typeDefCollection.TypeDefForStruct structTypeDefIn
		}
		out {
			typeDefCollection.TypeDefForStruct structTypeDefOut
		}
	}

	method methodWithMapTypeDefParameter {
		in {
			typeDefCollection.TypeDefForMap mapTypeDefIn
		}
		out {
			typeDefCollection.TypeDefForMap mapTypeDefOut
		}
	}

	method methodWithEnumTypeDefParameter {
		in {
			typeDefCollection.TypeDefForEnum enumTypeDefIn
		}
		out {
			typeDefCollection.TypeDefForEnum enumTypeDefOut
		}
	}

	method methodWithByteBufferTypeDefParameter {
		in {
			typeDefCollection.TypeDefForByteBuffer byteBufferTypeDefIn
		}
		out {
			typeDefCollection.TypeDefForByteBuffer byteBufferTypeDefOut
		}
	}

	method methodWithArrayTypeDefParameter {
		in {
			typeDefCollection.ArrayTypeDefStruct arrayTypeDefIn
		}
		out {
			typeDefCollection.ArrayTypeDefStruct arrayTypeDefOut
		}
	}

	// currently not supported
	// Multiple imports with the same name (e.g. Enumeration) although they are
	// located in different typeCollections. The Java code generator creates
	// bad code in this case since only one Enumeration can be imported and all
	// other references would need to use the fully qualified typename.
	//
	//method methodWithSingleEnumParameters {
	//	in {
	//		namedTypeCollection2.Enumeration enumerationArg
	//	}
	//	out {
	//		namedTypeCollection2.ExtendedTypeCollectionEnumerationInTypeCollection enumerationOut
	//	}
	//}
	method methodWithSingleEnumParameters {
		in {
			namedTypeCollection2.ExtendedEnumerationWithPartlyDefinedValues enumerationArg
		}
		out {
			namedTypeCollection2.ExtendedTypeCollectionEnumerationInTypeCollection enumerationOut
		}
	}

	method methodWithMultipleEnumParameters {
		in {
			Enumeration enumerationArg
			namedTypeCollection2.ExtendedTypeCollectionEnumerationInTypeCollection extendedEnumerationArg
		}
		out {
			namedTypeCollection2.ExtendedEnumerationWithPartlyDefinedValues extendedEnumerationOut
			Enumeration enumerationOut
		}
	}

	method methodWithSingleMapParameters {
		in {
			namedTypeCollection2.MapStringString mapArg
		}
		out {
			namedTypeCollection2.MapStringString mapOut
		}
	}

	method methodWithSingleStructParameters {
		in {
			namedTypeCollection2.ExtendedBaseStruct extendedBaseStructArg
		}
		out {
			namedTypeCollection2.ExtendedStructOfPrimitives extendedStructOfPrimitivesOut
		}
	}

	method methodWithMultipleStructParameters {
		in {
			namedTypeCollection2.ExtendedStructOfPrimitives extendedStructOfPrimitivesArg
			namedTypeCollection2.BaseStruct baseStructArg
			// currently not supported
			// see above (because of same typeName in multiple typeCollections)
			//BaseStruct anonymousBaseStructArg
		}
		out {
			namedTypeCollection2.BaseStructWithoutElements baseStructWithoutElementsOut
			namedTypeCollection2.ExtendedExtendedBaseStruct extendedExtendedBaseStructOut
		}
	}

	method methodWithStringsAndSpecifiedStringOutLength {
		in {
			String stringArg
			Int32 int32StringLengthArg
		}
		out {
			String stringOut
		}
	}

	// FIRE-AND-FORGET METHODS
	<**
		@description: This attribute is used to record that a fireAndForget method is being performed.
	**>
	attribute Int32 attributeFireAndForget
	
	method methodFireAndForgetWithoutParameter fireAndForget {
	}

	method methodFireAndForgetWithInputParameter fireAndForget {
		in {
			Int32 int32Arg
		}
	}

	// OVERLOADED METHODS
	// overload with different out parameter is not supported

	method overloadedMethod {
		out {
			String stringOut
		}
	}

	method overloadedMethod {
		in {
			Boolean booleanArg
		}
		out {
			String stringOut
		}
	}

	<**
		@description: this method also tests multiple parameters of different types
	**>
	method overloadedMethod {
		in {
			namedTypeCollection2.ExtendedExtendedEnumeration[] enumArrayArg
			Int64 int64Arg
			namedTypeCollection2.BaseStruct baseStructArg
			Boolean booleanArg
		}
		out {
			Double doubleOut
			String[] stringArrayOut
			namedTypeCollection2.ExtendedBaseStruct extendedBaseStructOut
		}
	}

	method overloadedMethodWithSelector:selector1 {
		out {
			String stringOut
		}
	}

	method overloadedMethodWithSelector:selector2 {
		in {
			Boolean booleanArg
		}
		out {
			String stringOut
		}
	}

	<**
		@description: this method also tests multiple parameters of different types
	**>
	method overloadedMethodWithSelector:selector3 {
		in {
			namedTypeCollection2.ExtendedExtendedEnumeration[] enumArrayArg
			Int64 int64Arg
			namedTypeCollection2.BaseStruct baseStructArg
			Boolean booleanArg
		}
		out {
			Double doubleOut
			String[] stringArrayOut
			namedTypeCollection2.ExtendedBaseStruct extendedBaseStructOut
		}
	}

	// METHODS WITH ERROR DEFINITIONS

	method methodWithoutErrorEnum {
		in {
			String wantedExceptionArg
		}
	}

	method methodWithAnonymousErrorEnum {
		in {
			String wantedExceptionArg
		}
		error {
			ERROR_3_1_NTC
			ERROR_3_2_NTC
			ERROR_3_3_NTC
		}
	}

	method methodWithExistingErrorEnum {
		in {
			String wantedExceptionArg
		}
		error namedTypeCollection2.ExtendedErrorEnumTc
	}

	method methodWithExtendedErrorEnum {
		in {
			String wantedExceptionArg
		}
		error extends namedTypeCollection2.ExtendedErrorEnumTc {
			ERROR_3_1_NTC
			ERROR_3_2_NTC
			ERROR_3_3_NTC
		}
	}

	// BROADCASTS WITHOUT FILTER PARAMETERS

	// Broadcasts without parameters not supported
	//broadcast broadcastWithoutParameters {
	//}

	broadcast broadcastWithSinglePrimitiveParameter {
		out {
			String stringOut
		}
	}

	method methodToFireBroadcastWithSinglePrimitiveParameter {
		in {
			String[] partitions
		}
	}

	broadcast broadcastWithMultiplePrimitiveParameters {
		out {
			Double doubleOut
			String stringOut
		}
	}

	method methodToFireBroadcastWithMultiplePrimitiveParameters {
		in {
			String[] partitions
		}
	}

	broadcast broadcastWithSingleArrayParameter {
		out {
			String[] stringArrayOut
		}
	}

	method methodToFireBroadcastWithSingleArrayParameter {
		in {
			String[] partitions
		}
	}

	broadcast broadcastWithMultipleArrayParameters {
		out {
			UInt64[] uInt64ArrayOut
			namedTypeCollection1.StructWithStringArray[] structWithStringArrayArrayOut
		}
	}

	method methodToFireBroadcastWithMultipleArrayParameters {
		in {
			String[] partitions
		}
	}

	broadcast broadcastWithSingleByteBufferParameter {
		out {
			ByteBuffer byteBufferOut
		}
	}

	method methodToFireBroadcastWithSingleByteBufferParameter {
		in {
			ByteBuffer byteBufferIn
			String[] partitions
		}
	}

	broadcast broadcastWithMultipleByteBufferParameters {
		out {
			ByteBuffer byteBufferOut1
			ByteBuffer byteBufferOut2
		}
	}

	method methodToFireBroadcastWithMultipleByteBufferParameters {
		in {
		 	ByteBuffer byteBufferIn1
			ByteBuffer byteBufferIn2
			String[] partitions
		}
	}

	broadcast broadcastWithSingleEnumerationParameter {
		out {
			namedTypeCollection2.ExtendedTypeCollectionEnumerationInTypeCollection enumerationOut
		}
	}

	method methodToFireBroadcastWithSingleEnumerationParameter {
		in {
			String[] partitions
		}
	}

	broadcast broadcastWithMultipleEnumerationParameters {
		out {
			namedTypeCollection2.ExtendedEnumerationWithPartlyDefinedValues extendedEnumerationOut
			Enumeration enumerationOut
		}
	}

	method methodToFireBroadcastWithMultipleEnumerationParameters {
		in {
			String[] partitions
		}
	}

	broadcast broadcastWithSingleStructParameter {
		out {
			namedTypeCollection2.ExtendedStructOfPrimitives extendedStructOfPrimitivesOut
		}
	}

	method methodToFireBroadcastWithSingleStructParameter {
		in {
			String[] partitions
		}
	}

	broadcast broadcastWithMultipleStructParameters {
		out {
			namedTypeCollection2.BaseStructWithoutElements baseStructWithoutElementsOut
			namedTypeCollection2.ExtendedExtendedBaseStruct extendedExtendedBaseStructOut
		}
	}

	method methodToFireBroadcastWithMultipleStructParameters {
		in {
			String[] partitions
		}
	}

	// SELECTIVE BROADCASTS

	<**
		@description: broadcastWithFiltering test event
		@param: stringOfInterest (String) filter parameter number one
		@param: stringArrayOfInterest (String[]) filter parameter number two
		@param: enumerationOfInterest (namedTypeCollection2.ExtendedTypeCollectionEnumerationInTypeCollection) filter
		parameter number three
		@param: structWithStringArrayOfInterest (namedTypeCollection1.StructWithStringArray) filter
		parameter number four
		@param: structWithStringArrayArrayOfInterest (namedTypeCollection1.StructWithStringArray[]) filter
		parameter number five
	**>
	broadcast broadcastWithFiltering selective {
		out {
			String stringOut
			String[] stringArrayOut
			namedTypeCollection2.ExtendedTypeCollectionEnumerationInTypeCollection enumerationOut
			namedTypeCollection1.StructWithStringArray structWithStringArrayOut
			namedTypeCollection1.StructWithStringArray[] structWithStringArrayArrayOut
		}
	}

	method methodToFireBroadcastWithFiltering {
	in {
		String stringArg
	}
}

	// CONTRACTS
	// not supported

	// USER-DEFINED TYPES
	// name conflict with types in anonymous typeCollection

	// TYPE DEFINITIONS
	// not supported

	// ARRAYS
	// only implicit, one-dimensional array types are supported

	// ENUMERATIONS

	<**
		@description: overloaded enumeration in interface TestInterface
		@details: enumerations with the same name but different values reside
			in other typeCollections and interfaces
	**>
	enumeration InterfaceEnumeration {
		ENUM_I1_VALUE_1 = 11001
		ENUM_I1_VALUE_2 = 11002
		ENUM_I1_VALUE_3 = 11003
	}

	enumeration ExtendedTypeCollectionEnumerationInInterface extends namedTypeCollection1.Enumeration {
		ENUM_I1_VALUE_EXTENSION_FOR_TYPECOLLECTION = 11000001
	}
	enumeration ExtendedInterfaceEnumerationInInterface extends TestInterface.InterfaceEnumeration {
		ENUM_I1_VALUE_EXTENSION_FOR_INTERFACE = 11000001
	}

	enumeration ErrorEnumInterface {
		ERROR_I_1
		ERROR_I_2
		ERROR_I_3
		ERROR_I_4 = 42
	}

	// STRUCTURES
	struct BaseStructInterface {
		String baseStructStringInInterface
	}

	// UNIONS (VARIANTS)
	// not supported in JavaScript, same as structures in Java, C++

	// MAPS (DICTIONARIES)
	// not supported
}
